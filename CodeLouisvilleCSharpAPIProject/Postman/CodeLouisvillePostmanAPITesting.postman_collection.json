{
	"info": {
		"_postman_id": "76d9c198-5a69-421c-a24e-fa98e06724fc",
		"name": "CodeLouisvillePostmanAPITesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12010096"
	},
	"item": [
		{
			"name": "GetUserWithID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User firstname should be Emma\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.first_name).to.eq(\"Emma\");\r",
							"});\r",
							"pm.test(\"User lastname should be Wong\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.last_name).to.eq(\"Wong\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?id=3",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful Put request\",() => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\",() => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql\r",
							"    ('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"User name should be Sajil Shah\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Sajil Shah\");\r",
							"});\r",
							"\r",
							"pm.test(\"Checking user email ID \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(\"sazeel47383@gmail.com\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sajil Shah\",\r\n    \"job\": \"QA Engineer\",\r\n    \"email\": \"sazeel47383@gmail.com\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeTestingWithPostRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Error Message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\r",
							"        \"Note: Only defined users succeed registration\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"Sajil.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/register",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeletingNotAvailabeId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 24 No Content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/5555",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"5555"
					]
				}
			},
			"response": []
		},
		{
			"name": "PatchForUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User Name should be Sajil Shah\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eq(\"Sajil Shah\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sajil Shah\",\r\n    \"job\": \"Software Quality Engineer\"\r\n   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users?id=7",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserToCheckContain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\",() => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdatingTheAlbums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 11,\r\n    \"id\": 101,\r\n    \"title\": \"Broken Pieces\"\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/albums",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"albums"
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\",() => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql\r",
							"    ('application/json; charset=utf-8');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/albums?userID=20",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"albums"
					],
					"query": [
						{
							"key": "userID",
							"value": "20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "TestingBodyConatinsString",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body contains string\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"userId\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetForInternalServerError",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"UnSuccessful Internal Server Error is\", function () {\r",
							"   pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n    \"userId\": 2,\r\n    \"id\": 25,\r\n    \"title\": \"Api Testing assignment\",\r\n    \"completed\": true\r\n  },",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/todos?id=25",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"todos"
					],
					"query": [
						{
							"key": "id",
							"value": "25"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ResponseValueCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Value Check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.completed).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": 2,\r\n    \"id\": 25,\r\n    \"title\": \"Api Testing assignment\",\r\n    \"completed\": true\r\n  }\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/todos?id=25",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"todos"
					],
					"query": [
						{
							"key": "id",
							"value": "25"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeTesting",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Error Message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\r",
							"        \"Missing email or username\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\"=\"eve.holt@reqres.in\",\r\n    \"password\"= \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "javascript"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/login",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "ResponseTime",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Trent\",\r\n    \"job\": \"QA Lead\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "CacheControlValueCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Cache-control check\",() => {\r",
							"    pm.expect(pm.response.headers.get('Cache-control')).to.eql\r",
							"    ('max-age=43200');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users?username=Bret",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "username",
							"value": "Bret"
						}
					]
				}
			},
			"response": []
		}
	]
}